# 集合を二進数を使って、1つの整数で表現する。
全体集合を U = {0, 1, 2, 3.., N-1} のN個　であるとき、
Uの部分集合はそれぞれの要素について、 含まれる/含まれない の２通りであり、
これを0 から 2^n -1までの2^n 種類の整数で表す。

-> 二進数h行きして、一番下の桁を要素0、一番上の桁を要素N-1 となるように順番に対応させて、
   「その桁の値が1であれば、対応する要素を含む」　と考える。
   このような対応のさせ方を、「集合をビットで表現する」などという。

メリット
・0 から 2^n -1 までの整数が全体集合Uの全ての部分集合にちょうど対応するため、for文などでループを回すことができる
・整数であるため、配列のインデックスとして扱うことができる。
・「AがBの部分集合であるとき、Aを表現した整数はBを表現した整数以下である。」ということが成り立つ。これの性質は動的計画法で役たつ。
・集合に対するさまざまな操作を、ビット演算を用いて高速に行える。

以下の説明において、2進数表記はそれぞれ以下のように要素と対応
集合の要素 ->        3, 2, 1, 0
2進数の対応する桁->   1  1  1  1
 

和集合を取りたいとき -> ビットごとの or を演算をする

10進数  2進数    集合
  3    0011   { 0, 1 }
  9    1001   { 0, 3 }
       ↓各桁のor をとる
  11   1011   { 0, 1, 3}


積集合を取りたいとき -> ビットごとの and を演算をする

10進数  2進数    集合
  3    0011   { 0, 1 }
  9    1001   { 0, 3 }
      ↓各桁のand をとる
  1    0001    { 0 }

補集合を取りたいとき
全体集合は 2^n -1 であるため、整数n で表される集合の補集合は 「2^n -1 から nで1となっている桁のビットを消したもの」で表現できる。
これは xor という演算でも、2^n -1 -n と引き算しても良い。 2^n -1 は全て ビットが全て１であるため、繰り下がりがおこらない。

10進数  2進数    集合
  15   1111   { 0, 1, 2, 3 }
  3    0011   { 0, 1 }
   ↓引き算
  12   1100    { 2, 3 }