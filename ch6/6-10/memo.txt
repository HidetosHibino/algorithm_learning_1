ダイクストラ法
ダイクストラ法は幅優先探索とほぼ同じアルゴリズムだが、キューの代わりにヒープを使う

ヒープとは
キューは、データを挿入し、「データを入れた順」に取り出すことができるデータ構造
ヒープは、データを挿入し、「データを小さい順」に取り出すことのできるデータ構造

キューは、挿入と取り出しの計算量はどちらもO(1)。
ヒープは、ヒープのサイズをn としたとき、挿入と取り出しの計算量はそれぞれO(logN)である。

ダイクストラ法では、最短距離d の頂点からたどるへんの重みをxとしたときに、
隣接する頂点の距離を d+x とする。


注目している頂点    ------重みx------ 他の頂点:a
    距離d                           距離d+x

                 ------重みy------ 他の頂点:b
                                   距離d+y

                 ------重みz------ 他の頂点:c
                                   距離d+z

ヒープは、ヒープの中で最小のものを取り出せるため、「距離dの頂点をヒープから取り出して、距離d+xの頂点をヒープに入れる」という操作により、取り出される頂点の距離が常に最小であることを保証できる。

ダイクストラ法の手続き
1.視点の距離を0とする。 始点をヒープに入れる。
2.ヒープが空になるまで、以下を続ける。
  ヒープから頂点を取り出す。その頂点をvとし、始点からv までの距離をd とする。
  v に隣接する未訪問の頂点について、「vからたどる辺の重みがxのとき距離をd+xとして、」ヒープに入れる。

rubyの組み込みクラスには　heapクラスはないみたい。
