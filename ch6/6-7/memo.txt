# 累積和
# 数値の配列について、前計算した結果の配列。
# 各要素が次の値をもつ。

# sum[0] = [0]
# sum[i] (i>0): A[0] から A[i-1]までの和
#   -> sum[i] = A[0] + A[1] + ... A[i-1]

# 配列        : |   0番目   |   1番目   |   2番目   |
# 配列の累積和 : |     0    | 配列の0番  | 配列の1番  |
#              |           | 目までの和  |目までの和 |

# 配列:   | 2 | 5 | 1 |
# 累積和: | 0 | 2 | 7 | 8 |

# 累積はを作る方法
# 愚直な方法

sum = [0]

N.times do |i|
  # A[0] から A[i]までの和を記録する変数
  s = 0

  # sに A[0] から A[i] までを足し合わせる
  (i + 1).times do |j|
    s += A[j]
  end

  sum << s
end

# 計算量は、
# 最初のループがN回、
# このループ内で、 i+1回 で、 i= N-1 のときは N回実行される。

# 1 + 2 + 3 ... N = N(N+1)/2
# なので、 O(N^2)


# 効率良くする
sum = [0]
N.times do |i|
  # A[0] から A[i]までの和を記録する変数。
  s = sum[i] + A[i]

  # A[0] から A[i] までの和を sum に追加する
  sum << s
end

# この場合は、
# ループがO(N) で、ループ内の操作はO(1)なので全体量はO(N)になる

